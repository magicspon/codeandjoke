/*
	Grid Mixins

*/

$grid-settings : (
	container: 1098px,
	columns: 12,
	gutter: 30px,
	gutter-side: right,
	gutter-type: padding,
	direction: left,
	padding-style: fixed,
	output: float
);

$grid-justify-settings : (
	container: 1098px,
	columns: 12,
	gutter: 15px,
	gutter-side: both,
	gutter-type: padding,
	direction: left,
	padding-style: fixed,
	output: justify,
	align: left
);


$grid-default-columns: map-get($grid-settings,columns);
$grid-default-gutter: map-get($grid-settings,gutter);
$grid-default-gutter-side: map-get($grid-settings,gutter-side);
$grid-default-gutter-type: map-get($grid-settings,gutter-type);


// grid wapper mixin
// used for clearing column margins/padding or ustify grid layout

@mixin grid-wrapper($map: $grid-settings) {

	// initalize gutter value
	$g:  map-get($map, gutter);

	// get the output style, float, inline, jusify
	$output: map-get($map, output);

	// include clearfix if it's a float
	@if $output == float {
		@include clearfix();
	}

	// inline-block, reset font-size to 0
	@if $output == inline or $output == justify {
		font-size: 0;
	}
	// justify, add the justify properties
	@if $output == justify {
		text-align: justify;
		&:after {
			display: inline-block;
			width: 100%;
			content: " ";
		}
		// reset child element text-align
		& > div {
			text-align: map-get($map,align);
		}
	}

	$gutter-type: map-get($map,gutter-type);
	$gutter: map-get($map,gutter);
	$gutter-side: map-get($map,gutter-side);

	// if the gutter type is margin we need to convert the px value into a percentage

	@if $gutter-type == margin {
		$g: gridCalc($gutter, map-get($map,container));
	} @else {
		// otherwise just use the px value
		$g: $gutter;
	}

	@if $output != justify {

		// clear left side gutter
		@if $gutter-side == left {
			margin-left: -$g;
		}
		// clear right side gutter
		@if $gutter-side == right {
			margin-right: -$g;
		}
		// clear both sides gutter
		@if $gutter-side == both {
			margin-left: -$g;
			margin-right: -$g;
		}

	}

}

@function column-width($x,$y,$excess: 0,$map:$grid-settings) {
	$excess-width: if($excess == 0, 0, gridCalc($excess,map-get($map,container)));
	$width: gridCalc($x,$y) - $excess-width;
	@return $width;
}


@mixin grid-column(
		$columns: 1 of $grid-default-columns, 
		$with: 30px padding right, 
		$map: $grid-settings,
		$render: true
) {

	$x: nth($columns,1);
	$y: map-get($map,columns);
	$center: null;
	$output: map-get($map, output);
	$width: null;
	$gutter: map-get($map,gutter);
	$gutter-type: map-get($map,gutter-type);
	$gutter-side: map-get($map,gutter-side);

	// 1 value argument, 
	// uses the default total columns, i.e. 12
	@if length($columns) >= 1 {
		// set the width value
		$width: gridCalc($x,$y);
	}

	@if length($columns) == 4 {
		$center: nth($columns,4); 
	}

	// if more than 1 arugment
	@if length($columns) > 1 {
		// if three arguments have been passed we want to use the 3 value as the total columns
		// 1 of 12
		@if length($columns) == 3 {
			// get the third value from the columns list
			$y: nth($columns,3);
			// reset the width value
			$width: gridCalc($x,$y);
		}
	}

	// if render is true
	// if we just want the width outputted we can set render to false
	@if $render == true {

		@if length($with) >= 1 {
			$gutter: nth($with, 1);
		}
		@if length($with) > 1 {
			$gutter-type: nth($with, 2);
		}
		@if length($with) == 3 {
			$gutter-side: nth($with, 3);
		}

		// if zero is passed in we wont' add any gutters, not even 0 zalues
		@if $gutter != 0 {

			// if the gutter type is margin we need to adjust the width value
			@if $gutter-type == margin {
				// get the wrapper width, used for calculating a px margin value into a percetange
				// margins must be outputted as percentages
				$wrapper: map-get($map,container);
				// set the gutter value
				$gutter: gridCalc($gutter, $wrapper);
				//	remove the gutter value from the overal width
				$width: gridCalc($x,$y) - $gutter;

				@if $gutter-side == left {
					margin-left: $gutter;
				}

				@if $gutter-side == right {
					margin-right: $gutter;
				}

				@if $gutter-side == both {
					margin-left: $gutter / 2;
					margin-right: $gutter / 2;
				}

			} @else {

				@if $gutter-side == left {
					padding-left: $gutter;
				}

				@if $gutter-side == right {
					padding-right: $gutter;
				}

				@if $gutter-side == both {
					padding-left: $gutter / 2;
					padding-right: $gutter / 2;
				}

			} // end of gutter type conditional
		}

		// if we are not centering the content
		// add the float/display style
		@if $center == null {

			@if $output == float {
				float: map-get($map, direction);
				@debug $output;
			}

			@if $output == inline or $output == justify {
				display: inline-block;
				vertical-align: top;
			}

		} @else {
			margin-left: auto;
			margin-right: auto;
		}
	}
	// set the width 
	width: $width;
}


//@mixin sort-order($columns: 1 of 3 from 4) {
//	$x: nth($columns,1);
//	$y: nth($columns,3);
//	$pos: nth($columns,5);
//
//	width: column-width($x,$y);
//	float: left;
//
//	$margin: ($pos - 1) * column-width($x,$y);
//
//	$direction: map-get($grid-settings,direction);
//	$reverse: opposite($direction);
//
//	margin-#{$direction}: $margin;
//	margin-#{$reverse}: -100%;
//
//}

